from dataclasses import dataclass


@dataclass
class ALConfig:
    SAMPLING: str
    CLUSTER: str
    NR_QUERIES_PER_ITERATION: int
    WITH_UNCERTAINTY_RECOMMENDATION: bool
    WITH_CLUSTER_RECOMMENDATION: bool
    WITH_SNUBA_LITE: bool
    MINIMUM_TEST_ACCURACY_BEFORE_RECOMMENDATIONS: float
    UNCERTAINTY_RECOMMENDATION_CERTAINTY_THRESHOLD: float
    UNCERTAINTY_RECOMMENDATION_RATIO: float
    CLUSTER_RECOMMENDATION_RATIO_LABELED_UNLABELED: float
    CLUSTER_RECOMMENDATION_MINIMUM_CLUSTER_UNITY_SIZE: float
    ALLOW_RECOMMENDATIONS_AFTER_STOP: bool
    STOPPING_CRITERIA_UNCERTAINTY: float
    STOPPING_CRITERIA_ACC: float
    STOPPING_CRITERIA_STD: float
    USER_QUERY_BUDGET_LIMIT: float
    RANDOM_SEED: float
    N_JOBS: int
    NR_LEARNING_ITERATIONS: int

    RANDOM_SAMPLE_EVERY: int


def config() -> ALConfig:
    return ALConfig(
        SAMPLING="uncertainty_max_margin",
        CLUSTER="MostUncertain_max_margin",
        NR_QUERIES_PER_ITERATION=100,
        WITH_UNCERTAINTY_RECOMMENDATION=True,
        WITH_CLUSTER_RECOMMENDATION=True,
        WITH_SNUBA_LITE=False,
        MINIMUM_TEST_ACCURACY_BEFORE_RECOMMENDATIONS=0,
        UNCERTAINTY_RECOMMENDATION_CERTAINTY_THRESHOLD=0.99,
        UNCERTAINTY_RECOMMENDATION_RATIO=0.01,
        CLUSTER_RECOMMENDATION_RATIO_LABELED_UNLABELED=0.8,
        CLUSTER_RECOMMENDATION_MINIMUM_CLUSTER_UNITY_SIZE=0.3,
        ALLOW_RECOMMENDATIONS_AFTER_STOP=True,
        STOPPING_CRITERIA_UNCERTAINTY=0,
        STOPPING_CRITERIA_ACC=0,
        STOPPING_CRITERIA_STD=0,
        USER_QUERY_BUDGET_LIMIT=2000,
        RANDOM_SEED=-1,
        N_JOBS=-1,
        NR_LEARNING_ITERATIONS=200000,
        RANDOM_SAMPLE_EVERY=10
    )
